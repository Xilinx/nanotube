#! /usr/bin/python3

############################################################################
#   Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
#   SPDX-License-Identifier: MIT
############################################################################

import argparse
import sys
import yaml

MODE_HPP="hpp"
MODE_CPP="cpp"
MODES=(MODE_HPP, MODE_CPP)

TAG_NAME="Name"
TAG_COPYRIGHT="Copyright"
TAG_FLAGS="Flags"
TAG_FMRB="Fmrb"

FLAG_DUMMY="Dummy"
FLAG_NANOTUBE="Nanotube"
FLAG_LLVM="LLVM"

###########################################################################

HPP_BEGIN="""
#ifndef INTRINSIC_DEFS_HPP
#define INTRINSIC_DEFS_HPP

#include <map>
#include <string>
#include <vector>

#include "llvm/Analysis/AliasAnalysis.h"

namespace nanotube
{"""

ENUM_BEGIN="""
  namespace Intrinsics
  {
    typedef enum {
"""

ENUM_END="""
      // Not used.  Indicates the maximum value.
      end,
    } ID;
  } // namespace Intrinsics"""

HPP_END="""
  extern std::map<std::string, Intrinsics::ID> intrinsic_name_to_id;
  extern std::map<Intrinsics::ID, std::string> intrinsic_id_to_name;
  extern const std::vector<llvm::FunctionModRefBehavior> intrinsic_fmrb;

} // namespace nanotube

#endif // INTRINSIC_DEFS_HPP
"""

###########################################################################

CPP_BEGIN="""
#include "IntrinsicDefs.hpp"

using namespace nanotube;
using namespace llvm;
"""

NAME_TO_ID_BEGIN="""
std::map<std::string, Intrinsics::ID> nanotube::intrinsic_name_to_id {
"""

NAME_TO_ID_END="""};
"""

ID_TO_NAME_BEGIN="""
std::map<Intrinsics::ID, std::string> nanotube::intrinsic_id_to_name {
"""

ID_TO_NAME_END="""};
"""

FMRB_BEGIN="""
#define RO  FMRB_OnlyReadsArgumentPointees
#define RW  FMRB_OnlyAccessesArgumentPointees
#define RWI FMRB_OnlyAccessesInaccessibleOrArgMem
#define I   FMRB_OnlyAccessesInaccessibleMem
#define DNA FMRB_DoesNotAccessMemory
#define UK  FMRB_UnknownModRefBehavior
/* Note: There is a lack of precision here in multiple dimensions.
 * Missing write-only, the distinction between inaccessible mem vs arg
 * mem, and read-only inaccessible + arg */
const std::vector<llvm::FunctionModRefBehavior> nanotube::intrinsic_fmrb {
"""

FMRB_END="""};
#undef RO
#undef RW
#undef RWI
#undef I
#undef DNA
#undef UK
"""

CPP_END="""
"""

###########################################################################

class app:
  def __init__(self, argv):
    self.__copyright = None
    self.__intrinsics = []

    p = argparse.ArgumentParser()

    p.add_argument("-C", "--cpp", dest="mode",
                   action="store_const", const=MODE_CPP,
                   help="Output a C++ implementation file.")
    p.add_argument("-H", "--hpp", dest="mode",
                   action="store_const", const=MODE_HPP,
                   help="Output a C++ header file.")
    p.add_argument("-m", "--mode", action="store", default=None,
                   help="Set the output mode.")

    p.add_argument("input", nargs=1, action="store",
                   help="The input file to process.")
    p.add_argument("output", nargs=1, action="store",
                   help="The output file to generate.")

    self.__prog = argv[0]
    self.__args = p.parse_args(argv[1:])

    if self.__args.mode == None:
      sys.stderr.write("%s: Mode not specified.  Use -C or -H.\n" %
                       self.__prog)
      sys.exit(1)

    if self.__args.mode not in MODES:
      sys.stderr.write("%s: Mode %r not valid.  Should be one of %s.\n" %
                       (self.__prog, self.__args.mode,
                        ", ".join(repr(x) for x in MODES)))
      sys.exit(1)

  def read_input(self):
    fname = self.__args.input[0]
    with open(fname, "r") as fh:
      self.__yaml = yaml.load(fh)
    for e in self.__yaml:
      if TAG_COPYRIGHT in e:
        self.__copyright = e[TAG_COPYRIGHT]
        continue

      if TAG_NAME not in e:
        sys.stderr.write("%s: Missing %r in definition %r.\n" %
                         (self.__prog, TAG_NAME, e))
        sys.exit(1)

      if TAG_FLAGS not in e:
        sys.stderr.write("%s: Missing %r in definition %r.\n" %
                         (self.__prog, TAG_FLAGS, e))
        sys.exit(1)

      if TAG_FMRB not in e:
        sys.stderr.write("%s: Missing %r in definition %r.\n" %
                         (self.__prog, TAG_FMRB, e))
        sys.exit(1)

      e[TAG_FLAGS] = e[TAG_FLAGS].split()
      self.__intrinsics.append(e)

  def write_copyright(self, fh):
    fh.write(self.__copyright)

  def write_enum(self, fh):
    fh.write(ENUM_BEGIN)
    for e in self.__intrinsics:
      fh.write("      %s,\n" %(e[TAG_NAME]))
    fh.write(ENUM_END)

  def write_hpp(self, fh):
    self.write_copyright(fh)
    fh.write(HPP_BEGIN)
    self.write_enum(fh)
    fh.write(HPP_END)

  def write_name_to_id(self, fh):
    fh.write(NAME_TO_ID_BEGIN)
    for e in self.__intrinsics:
      if FLAG_NANOTUBE not in e[TAG_FLAGS]:
        continue
      name = e[TAG_NAME]
      fh.write("  {\"nanotube_%s\", Intrinsics::%s},\n" %
               (name, name))
    fh.write(NAME_TO_ID_END)

  def write_id_to_name(self, fh):
    fh.write(ID_TO_NAME_BEGIN)
    for e in self.__intrinsics:
      enum_name = e[TAG_NAME]
      name = enum_name
      if FLAG_NANOTUBE in e[TAG_FLAGS]:
        name = "nanotube_"+name
      fh.write("  {Intrinsics::%s, \"%s\"},\n" %
               (enum_name, name))
    fh.write(ID_TO_NAME_END)

  def write_fmrb(self, fh):
    fh.write(FMRB_BEGIN)
    for e in self.__intrinsics:
      name = e[TAG_NAME]
      fmrb = e[TAG_FMRB]
      fh.write("  %-6s // %s\n" % (fmrb+",", name))
    fh.write(FMRB_END)

  def write_cpp(self, fh):
    self.write_copyright(fh)
    fh.write(CPP_BEGIN)
    self.write_name_to_id(fh)
    self.write_id_to_name(fh)
    self.write_fmrb(fh)
    fh.write(CPP_END)

  def write_output(self):
    fname = self.__args.output[0]
    with open(fname, "w") as fh:
      if self.__args.mode == MODE_HPP:
        self.write_hpp(fh)
      elif self.__args.mode == MODE_CPP:
        self.write_cpp(fh)
      else:
        assert False

  def main(self):
    self.read_input()
    self.write_output()

app(sys.argv).main()
